// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {AccessManagedProxy} from "{{ampPath}}AccessManagedProxy.sol";
import {IAccessManager} from "@openzeppelin/contracts/access/manager/IAccessManager.sol";

/**
 * @title AccessManagedProxyS{{ numOfSkipMethods }}
 * @notice Specialization of AccessManagedProxy with pass thru (skips AM) for some messages for gas optimization
 *
 * @custom:security-contact security@ensuro.co
 * @author Ensuro
 */
contract AccessManagedProxyS{{ numOfSkipMethods }} is AccessManagedProxy {
  {{#each zeroToN}}
  bytes4 internal immutable PASS_THRU_METHODS_{{this}};
  {{/each}}

  /**
   * @notice Constructor of the proxy, defining the implementation and the access manager
   * @dev Initializes the upgradeable proxy with an initial implementation specified by `implementation` and
   *      with `manager` as the ACCESS_MANAGER that will handle access control.
   *
   * @param implementation The initial implementation contract.
   * @param _data If nonempty, it's used as data in a delegate call to `implementation`. This will typically be an
   *              encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.
   * @param manager The access manager that will handle access control
   * @param passThruMethods The selector of methods that will skip the access control validation, typically used for
   *                        views and other methods for gas optimization.
   *
   * Requirements:
   *
   * - If `data` is empty, `msg.value` must be zero.
   */
  constructor(
    address implementation,
    bytes memory _data,
    IAccessManager manager,
    bytes4[{{numOfSkipMethods}}] memory passThruMethods
  ) payable AccessManagedProxy(implementation, _data, manager) {
    {{#each zeroToN}}
    PASS_THRU_METHODS_{{this}} = passThruMethods[{{this}}];
    {{/each}}
  }

  /*
   * @notice Skips the access control if the method called is one of the passThruMethods
   * @dev See {PASS_THRU_METHODS()}
   * @param selector The selector of the method called
   * @return Whether the access control using ACCESS_MANAGER should be skipped or not
   */
  function _skipAC(bytes4 selector) internal view override returns (bool) {
    return
      {{#each zeroToN}}
      selector == PASS_THRU_METHODS_{{this}}{{#if @last}};{{else}} ||{{/if}}
      {{/each}}
  }

  /**
   * @notice Gives observability to the methods that are skipped from access control
   * @dev This list is fixed and defined on contract construction
   * @return methods The list of method selectors that skip ACCESS_MANAGER access control
   */
  // solhint-disable-next-line func-name-mixedcase
  function PASS_THRU_METHODS() external view returns (bytes4[] memory methods) {
    methods = new bytes4[]({{ numOfSkipMethods}});
    {{#each zeroToN}}
    methods[{{this}}] = PASS_THRU_METHODS_{{this}};
    {{/each}}
  }
}
